let
  prelude = https://raw.githubusercontent.com/reuron/reuron-io/main/prelude/package.ffg
let
  oldDefaultNeuron = https://raw.githubusercontent.com/reuron/reuron-lib/main/defaultSwcNeuron.ffg
let
  newDefaultNeuron = https://raw.githubusercontent.com/hpenagos/HHmodelParms/main/defaultSwcNeuron.ffg

let
  negOne : Integer = Natural/toInteger 0 -- Natural/toInteger 1

let
  segment : Natural -> {id: Natural, parent: Integer, x: Real, y: Real, z: Real, r: Real, type: Natural } = \i ->
  let
    ii : Real = Integer/toReal i
  let
    parent : Integer = if Natural/equal i 0 then negOne else (Natural/toInteger i) + negOne
    in {
          id: i,
          parent: parent,
          x: ii * 5.1,
          y: 20.1 * Real/cos (ii % 5.0),
          z: 20.1 * Real/sin (ii % 5.0),
          r: 0.5,
          type: if (Natural/equal i 0) then 1 else 2
        }

let
  stimulator =
  Neuron/stimulator {
    envelope: {
      period_sec: 0.010,
      onset_sec: 0.0001,
      offset_sec: 0.0007
    },
    current_shape: SquareWave {
      on_current_uamps_per_square_cm: 300.0,
      off_current_uamps_per_square_cm: 55.0
    }
  }
let
  mkNeuron = \useNew ->
    let y = if useNew then 0.1 else 0.0
    let maker = if useNew then newDefaultNeuron else oldDefaultNeuron
    in {
         neuron: maker (prelude.list.generate 200 segment),
         location: { x_mm: 0.0, y_mm: y, z_mm: 0.0 },
         stimulator_segments: [
          { segment: 5,  stimulator: stimulator },
        ]
       }
  in
Neuron/scene {
  neurons: [
     mkNeuron false,
     mkNeuron true
  ],
  synapses: []
}
